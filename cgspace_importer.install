<?php

use Drupal\taxonomy\Entity\Vocabulary;
use Drupal\Core\Config\FileStorage;
/**
 * hook_uninstall
 */
function cgspace_importer_uninstall() {
  \Drupal::configFactory()->getEditable('cgspace_importer.settings.processors.tags')->delete();
  \Drupal::configFactory()->getEditable('cgspace_importer.settings.processors.research_initiatives')->delete();
  \Drupal::configFactory()->getEditable('cgspace_importer.settings.processors.impact_areas')->delete();

  \Drupal::configFactory()->getEditable('cgspace_importer.settings.general')->delete();
  \Drupal::configFactory()->getEditable('cgspace_importer.settings.communities')->delete();
  \Drupal::configFactory()->getEditable('cgspace_importer.settings.collections')->delete();

  \Drupal::configFactory()->getEditable('cgspace_importer.mappings')->delete();

  \Drupal::state()->delete('cgspace_importer.last_run');

}

function cgspace_importer_update_800102() {

  $module_path = \Drupal::service('extension.list.module')->getPath('cgspace_importer');

  //create new taxonomy vocabularies
  $vid = 'cgspace_collection';

  if (!Vocabulary::load($vid)) {
    $vocabulary = Vocabulary::create([
      'vid' => $vid,
      'description' => 'Used to store CGSpace collections',
      'name' => 'Publication: Collection',
    ]);

    $vocabulary->save();
  }

  $vid = 'cgspace_community';

  if (!Vocabulary::load($vid)) {
    $vocabulary = Vocabulary::create([
      'vid' => $vid,
      'description' => 'Used to store CGSpace communities',
      'name' => 'Publication: Community',
    ]);

    $vocabulary->save();
  }

  //create new fields storage
  $config_path = $module_path . '/config/optional';
  $config_manager = Drupal::service('config.manager');

  $source = new FileStorage($config_path);
  $entity_type_manager = \Drupal::entityTypeManager();
  $field_storage = $entity_type_manager->getStorage('field_storage_config');
  $field_config = $entity_type_manager->getStorage('field_config');

  // Only try to create the field if it doesn't already exist.
  if (!$field_storage->load('node.field_cg_collections_ref')) {
    $config_record = $source->read('field.storage.node.field_cg_collections_ref.yml');
    $entity_type = $config_manager->getEntityTypeIdByName('field.storage.node.field_cg_collections_ref');

    /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $storage */
    $storage = $entity_type_manager->getStorage($entity_type);

    // Create the config entity.
    $storage
      ->createFromStorageRecord($config_record)
      ->save();
  }

  if (!$field_config->load('node.cgspace_publication.field_cg_collections_ref')) {
    $config_record = $source->read('field.field.node.cgspace_publication.field_cg_collections_ref');
    $entity_type = $config_manager->getEntityTypeIdByName('field.field.node.cgspace_publication.field_cg_collections_ref');

    /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $storage */
    $storage = $entity_type_manager->getStorage($entity_type);

    // Create the config entity.
    $storage
      ->createFromStorageRecord($config_record)
      ->save();
  }

  if (!$field_storage->load('node.field_cg_communities_ref')) {
    $config_record = $source->read('field.storage.node.field_cg_communities_ref');
    $entity_type = $config_manager->getEntityTypeIdByName('field.storage.node.field_cg_communities_ref');;

    /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $storage */
    $storage = $entity_type_manager->getStorage($entity_type);

    // Create the config entity.
    $storage
      ->createFromStorageRecord($config_record)
      ->save();
  }

  if (!$field_config->load('node.cgspace_publication.field_cg_communities_ref')) {
    $config_record = $source->read('field.field.node.cgspace_publication.field_cg_communities_ref');
    $entity_type = $config_manager->getEntityTypeIdByName('field.field.node.cgspace_publication.field_cg_communities_ref');

    /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $storage */
    $storage = $entity_type_manager->getStorage($entity_type);

    // Create the config entity.
    $storage
      ->createFromStorageRecord($config_record)
      ->save();
  }

  //update cgspace_importer mappings
  $config_factory = \Drupal::configFactory();
  $mappings = $config_factory->getEditable('cgspace_importer.mappings')->get('mappings');
  $field_cg_collections_ref = [
    'source' => 'collections',
    'target' => 'field_cg_collections_ref',
    'process' => [
      'plugin' => 'taxonomy_term',
      'vocabulary' => 'cgspace_collection',
      'create' => true
    ]
  ];

  $field_cg_communities_ref = [
    'source' => 'communities',
    'target' => 'field_cg_communities_ref',
    'process' => [
      'plugin' => 'taxonomy_term',
      'vocabulary' => 'cgspace_community',
      'create' => true
    ]
  ];

  $field_cg_publication_type_ref = [
    'source' => 'dcterms.type',
    'target' => 'field_cg_publication_type_ref',
    'process' => [
      'plugin' => 'taxonomy_term',
      'vocabulary' => 'cgspace_publication_type',
      'create' => true
    ]
  ];

  $mappings += $field_cg_collections_ref + $field_cg_communities_ref + $field_cg_publication_type_ref;

  $config_factory->getEditable('cgspace_importer.mappings')->set('mappings', $mappings)->save();

  //update field_cg_impact_areas_ref cardinality
  $config_factory->getEditable('field.storage.node.field_cg_impact_areas_ref')->set('cardinality', -1)->save();
  //update field_cg_initiatives_ref cardinality
  $config_factory->getEditable('field.storage.node.field_cg_initiatives_ref')->set('cardinality', -1)->save();
  //update field_cg_publication_type_ref cardinality
  $config_factory->getEditable('field.storage.node.field_cg_publication_type_ref')->set('cardinality', -1)->save();
  //update field_cg_tags_ref cardinality
  $config_factory->getEditable('field.storage.node.field_cg_tags_ref')->set('cardinality', -1)->save();
}
